// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 5
// RUN: %clang_cc1 -x hip -std=c++11 -triple amdgcn -fcuda-is-device -emit-llvm %s -o - | FileCheck %s
#include "Inputs/cuda.h"

// CHECK-LABEL: define dso_local noundef i32 @_Z24atomic32_op_singlethreadPiii(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP25:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP26:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP25]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP26_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP26]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i32 [[CMPXCHG_EXPECTED]], i32 [[CMPXCHG_DESIRED]] syncscope("singlethread-one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i32 [[CMPXCHG_EXPECTED3]], i32 [[CMPXCHG_DESIRED4]] syncscope("singlethread-one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i32 [[TMP8]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i32 [[TMP13]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = load i32, ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i32 [[TMP18]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    [[TMP20:%.*]] = load i32, ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = load i32, ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i32 [[TMP23]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i32 [[TMP28]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP33:%.*]] = load i32, ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i32 [[TMP33]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = load i32, ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i32 [[TMP38]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = load i32, ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP43:%.*]] = load i32, ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i32 [[TMP43]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = load i32, ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load atomic i32, ptr [[TMP46]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[ATOMIC_TEMP25_ASCAST]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[ATOMIC_TEMP25_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP48]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP50]], ptr [[DOTATOMICTMP26_ASCAST]], align 4
// CHECK-NEXT:    [[TMP51:%.*]] = load i32, ptr [[DOTATOMICTMP26_ASCAST]], align 4
// CHECK-NEXT:    store atomic i32 [[TMP51]], ptr [[TMP49]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    [[TMP52:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV27:%.*]] = trunc i8 [[TMP52]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV27]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP53:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP54:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP53]], %[[COND_TRUE]] ], [ [[TMP54]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i32 [[COND]]
//
__device__ int atomic32_op_singlethread(int *ptr, int val, int desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_load(ptr, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z25atomicu32_op_singlethreadPjjj(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i32 [[TMP2]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i32 [[TMP7]] syncscope("singlethread-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    ret i32 [[TMP10]]
//
__device__ unsigned int atomicu32_op_singlethread(unsigned int *ptr, unsigned int val, unsigned int desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  return val;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z21atomic32_op_wavefrontPiii(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP25:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP26:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP25]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP26_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP26]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i32 [[CMPXCHG_EXPECTED]], i32 [[CMPXCHG_DESIRED]] syncscope("wavefront-one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i32 [[CMPXCHG_EXPECTED3]], i32 [[CMPXCHG_DESIRED4]] syncscope("wavefront-one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i32 [[TMP8]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i32 [[TMP13]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = load i32, ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i32 [[TMP18]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    [[TMP20:%.*]] = load i32, ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = load i32, ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i32 [[TMP23]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i32 [[TMP28]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP33:%.*]] = load i32, ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i32 [[TMP33]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = load i32, ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i32 [[TMP38]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = load i32, ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP43:%.*]] = load i32, ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i32 [[TMP43]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = load i32, ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load atomic i32, ptr [[TMP46]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[ATOMIC_TEMP25_ASCAST]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[ATOMIC_TEMP25_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP48]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP50]], ptr [[DOTATOMICTMP26_ASCAST]], align 4
// CHECK-NEXT:    [[TMP51:%.*]] = load i32, ptr [[DOTATOMICTMP26_ASCAST]], align 4
// CHECK-NEXT:    store atomic i32 [[TMP51]], ptr [[TMP49]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    [[TMP52:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV27:%.*]] = trunc i8 [[TMP52]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV27]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP53:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP54:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP53]], %[[COND_TRUE]] ], [ [[TMP54]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i32 [[COND]]
//
__device__ int atomic32_op_wavefront(int *ptr, int val, int desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_load(ptr, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z22atomicu32_op_wavefrontPjjj(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i32 [[TMP2]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i32 [[TMP7]] syncscope("wavefront-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    ret i32 [[TMP10]]
//
__device__ unsigned int atomicu32_op_wavefront(unsigned int *ptr, unsigned int val, unsigned int desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  return val;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z21atomic32_op_workgroupPiii(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP25:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP25]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i32 [[CMPXCHG_EXPECTED]], i32 [[CMPXCHG_DESIRED]] syncscope("workgroup-one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i32 [[CMPXCHG_EXPECTED3]], i32 [[CMPXCHG_DESIRED4]] syncscope("workgroup-one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i32 [[TMP8]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i32 [[TMP13]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = load i32, ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i32 [[TMP18]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    [[TMP20:%.*]] = load i32, ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = load i32, ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i32 [[TMP23]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i32 [[TMP28]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP33:%.*]] = load i32, ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i32 [[TMP33]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = load i32, ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i32 [[TMP38]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = load i32, ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP43:%.*]] = load i32, ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i32 [[TMP43]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = load i32, ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[DOTATOMICTMP25_ASCAST]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[DOTATOMICTMP25_ASCAST]], align 4
// CHECK-NEXT:    store atomic i32 [[TMP48]], ptr [[TMP46]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV26:%.*]] = trunc i8 [[TMP49]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV26]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP50:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP51:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP50]], %[[COND_TRUE]] ], [ [[TMP51]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i32 [[COND]]
//
__device__ int atomic32_op_workgroup(int *ptr, int val, int desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z22atomicu32_op_workgroupPjjj(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i32 [[TMP2]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i32 [[TMP7]] syncscope("workgroup-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    ret i32 [[TMP10]]
//
__device__ unsigned int atomicu32_op_workgroup(unsigned int *ptr, unsigned int val, unsigned int desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  return val;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z17atomic32_op_agentPiii(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP25:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP25]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i32 [[CMPXCHG_EXPECTED]], i32 [[CMPXCHG_DESIRED]] syncscope("agent-one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i32 [[CMPXCHG_EXPECTED3]], i32 [[CMPXCHG_DESIRED4]] syncscope("agent-one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i32 [[TMP8]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i32 [[TMP13]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = load i32, ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i32 [[TMP18]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    [[TMP20:%.*]] = load i32, ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = load i32, ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i32 [[TMP23]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i32 [[TMP28]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP33:%.*]] = load i32, ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i32 [[TMP33]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = load i32, ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i32 [[TMP38]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = load i32, ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP43:%.*]] = load i32, ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i32 [[TMP43]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = load i32, ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[DOTATOMICTMP25_ASCAST]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[DOTATOMICTMP25_ASCAST]], align 4
// CHECK-NEXT:    store atomic i32 [[TMP48]], ptr [[TMP46]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV26:%.*]] = trunc i8 [[TMP49]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV26]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP50:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP51:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP50]], %[[COND_TRUE]] ], [ [[TMP51]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i32 [[COND]]
//
__device__ int atomic32_op_agent(int *ptr, int val, int desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z18atomicu32_op_agentPjjj(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i32 [[TMP2]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i32 [[TMP7]] syncscope("agent-one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    ret i32 [[TMP10]]
//
__device__ unsigned int atomicu32_op_agent(unsigned int *ptr, unsigned int val, unsigned int desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  return val;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z18atomic32_op_systemPiii(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP25:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP26:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP25]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP26_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP26]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i32 [[CMPXCHG_EXPECTED]], i32 [[CMPXCHG_DESIRED]] syncscope("one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i32 [[CMPXCHG_EXPECTED3]], i32 [[CMPXCHG_DESIRED4]] syncscope("one-as") monotonic monotonic, align 4
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i32 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i32, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[DOTATOMICTMP10_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i32 [[TMP8]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[DOTATOMICTMP11_ASCAST]], align 4
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i32 [[TMP13]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[ATOMIC_TEMP12_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = load i32, ptr [[DOTATOMICTMP13_ASCAST]], align 4
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i32 [[TMP18]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    [[TMP20:%.*]] = load i32, ptr [[ATOMIC_TEMP14_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = load i32, ptr [[DOTATOMICTMP15_ASCAST]], align 4
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i32 [[TMP23]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[ATOMIC_TEMP16_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[DOTATOMICTMP17_ASCAST]], align 4
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i32 [[TMP28]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATOMIC_TEMP18_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP33:%.*]] = load i32, ptr [[DOTATOMICTMP19_ASCAST]], align 4
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i32 [[TMP33]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = load i32, ptr [[ATOMIC_TEMP20_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[DOTATOMICTMP21_ASCAST]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i32 [[TMP38]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = load i32, ptr [[ATOMIC_TEMP22_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP43:%.*]] = load i32, ptr [[DOTATOMICTMP23_ASCAST]], align 4
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i32 [[TMP43]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = load i32, ptr [[ATOMIC_TEMP24_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load atomic i32, ptr [[TMP46]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[ATOMIC_TEMP25_ASCAST]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[ATOMIC_TEMP25_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP48]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP50]], ptr [[DOTATOMICTMP26_ASCAST]], align 4
// CHECK-NEXT:    [[TMP51:%.*]] = load i32, ptr [[DOTATOMICTMP26_ASCAST]], align 4
// CHECK-NEXT:    store atomic i32 [[TMP51]], ptr [[TMP49]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    [[TMP52:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV27:%.*]] = trunc i8 [[TMP52]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV27]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP53:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP54:%.*]] = load i32, ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP53]], %[[COND_TRUE]] ], [ [[TMP54]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i32 [[COND]]
//
__device__ int atomic32_op_system(int *ptr, int val, int desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_load(ptr, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i32 @_Z19atomicu32_op_systemPjjj(
// CHECK-SAME: ptr noundef [[PTR:%.*]], i32 noundef [[VAL:%.*]], i32 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i32 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTATOMICTMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i32 [[TMP2]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ATOMIC_TEMP_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[DOTATOMICTMP1_ASCAST]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i32 [[TMP7]] syncscope("one-as") monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[ATOMIC_TEMP2_ASCAST]], align 4
// CHECK-NEXT:    store i32 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[VAL_ADDR_ASCAST]], align 4
// CHECK-NEXT:    ret i32 [[TMP10]]
//
__device__ unsigned int atomicu32_op_system(unsigned int *ptr, unsigned int val, unsigned int desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  return val;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z24atomic64_op_singlethreadPxS_xx(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP25:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP25]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i64 [[CMPXCHG_EXPECTED]], i64 [[CMPXCHG_DESIRED]] syncscope("singlethread-one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i64 [[CMPXCHG_EXPECTED3]], i64 [[CMPXCHG_DESIRED4]] syncscope("singlethread-one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i64 [[TMP8]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i64 [[TMP13]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i64 [[TMP18]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = load i64, ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i64 [[TMP23]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = load i64, ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i64 [[TMP28]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load i64, ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i64 [[TMP33]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i64 [[TMP38]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP43:%.*]] = load i64, ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i64 [[TMP43]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[DOTATOMICTMP25_ASCAST]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[DOTATOMICTMP25_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP48]], ptr [[TMP46]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV26:%.*]] = trunc i8 [[TMP49]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV26]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP50:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP51:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP50]], %[[COND_TRUE]] ], [ [[TMP51]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i64 [[COND]]
//
__device__ long long atomic64_op_singlethread(long long *ptr, long long *ptr2, long long val, long long desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z25atomicu64_op_singlethreadPyS_yy(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP4:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP3_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP3]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP4_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP4]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i64 [[TMP2]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i64 [[TMP7]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load atomic i64, ptr [[TMP10]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[ATOMIC_TEMP3_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ATOMIC_TEMP3_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP12]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP14]], ptr [[DOTATOMICTMP4_ASCAST]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[DOTATOMICTMP4_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP15]], ptr [[TMP13]] syncscope("singlethread-one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    ret i64 [[TMP16]]
//
__device__ unsigned long long atomicu64_op_singlethread(unsigned long long *ptr, unsigned long long *ptr2, unsigned long long val, unsigned long long desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  val = __hip_atomic_load(ptr, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SINGLETHREAD);
  return val;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z21atomic64_op_wavefrontPxS_xx(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP25:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP26:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP25]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP26_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP26]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i64 [[CMPXCHG_EXPECTED]], i64 [[CMPXCHG_DESIRED]] syncscope("wavefront-one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i64 [[CMPXCHG_EXPECTED3]], i64 [[CMPXCHG_DESIRED4]] syncscope("wavefront-one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i64 [[TMP8]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i64 [[TMP13]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i64 [[TMP18]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = load i64, ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i64 [[TMP23]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = load i64, ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i64 [[TMP28]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load i64, ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i64 [[TMP33]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i64 [[TMP38]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP43:%.*]] = load i64, ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i64 [[TMP43]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load atomic i64, ptr [[TMP46]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[ATOMIC_TEMP25_ASCAST]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ATOMIC_TEMP25_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP48]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP50]], ptr [[DOTATOMICTMP26_ASCAST]], align 8
// CHECK-NEXT:    [[TMP51:%.*]] = load i64, ptr [[DOTATOMICTMP26_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP51]], ptr [[TMP49]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV27:%.*]] = trunc i8 [[TMP52]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV27]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP53:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP54:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP53]], %[[COND_TRUE]] ], [ [[TMP54]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i64 [[COND]]
//
__device__ long long atomic64_op_wavefront(long long *ptr, long long *ptr2, long long val, long long desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_load(ptr, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z22atomicu64_op_wavefrontPyS_yy(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP4:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP3_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP3]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP4_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP4]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i64 [[TMP2]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i64 [[TMP7]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load atomic i64, ptr [[TMP10]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[ATOMIC_TEMP3_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ATOMIC_TEMP3_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP12]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP14]], ptr [[DOTATOMICTMP4_ASCAST]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[DOTATOMICTMP4_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP15]], ptr [[TMP13]] syncscope("wavefront-one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    ret i64 [[TMP16]]
//
__device__ unsigned long long atomicu64_op_wavefront(unsigned long long *ptr, unsigned long long *ptr2, unsigned long long val, unsigned long long desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  val = __hip_atomic_load(ptr, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WAVEFRONT);
  return val;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z21atomic64_op_workgroupPxS_xx(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP25:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP25]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i64 [[CMPXCHG_EXPECTED]], i64 [[CMPXCHG_DESIRED]] syncscope("workgroup-one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i64 [[CMPXCHG_EXPECTED3]], i64 [[CMPXCHG_DESIRED4]] syncscope("workgroup-one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i64 [[TMP8]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i64 [[TMP13]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i64 [[TMP18]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = load i64, ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i64 [[TMP23]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = load i64, ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i64 [[TMP28]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load i64, ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i64 [[TMP33]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i64 [[TMP38]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP43:%.*]] = load i64, ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i64 [[TMP43]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[DOTATOMICTMP25_ASCAST]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[DOTATOMICTMP25_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP48]], ptr [[TMP46]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV26:%.*]] = trunc i8 [[TMP49]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV26]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP50:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP51:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP50]], %[[COND_TRUE]] ], [ [[TMP51]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i64 [[COND]]
//
__device__ long long atomic64_op_workgroup(long long *ptr, long long *ptr2, long long val, long long desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z22atomicu64_op_workgroupPyS_yy(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP3:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP3_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP3]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i64 [[TMP2]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i64 [[TMP7]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[DOTATOMICTMP3_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[DOTATOMICTMP3_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP12]], ptr [[TMP10]] syncscope("workgroup-one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    ret i64 [[TMP13]]
//
__device__ unsigned long long atomicu64_op_workgroup(unsigned long long *ptr, unsigned long long *ptr2, unsigned long long val, unsigned long long desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_WORKGROUP);
  return val;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z17atomic64_op_agentPxS_xx(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP25:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP25]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i64 [[CMPXCHG_EXPECTED]], i64 [[CMPXCHG_DESIRED]] syncscope("agent-one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i64 [[CMPXCHG_EXPECTED3]], i64 [[CMPXCHG_DESIRED4]] syncscope("agent-one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i64 [[TMP8]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i64 [[TMP13]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i64 [[TMP18]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = load i64, ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i64 [[TMP23]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = load i64, ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i64 [[TMP28]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load i64, ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i64 [[TMP33]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i64 [[TMP38]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP43:%.*]] = load i64, ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i64 [[TMP43]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[DOTATOMICTMP25_ASCAST]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[DOTATOMICTMP25_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP48]], ptr [[TMP46]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV26:%.*]] = trunc i8 [[TMP49]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV26]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP50:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP51:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP50]], %[[COND_TRUE]] ], [ [[TMP51]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i64 [[COND]]
//
__device__ long long atomic64_op_agent(long long *ptr, long long *ptr2, long long val, long long desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z18atomicu64_op_agentPyS_yy(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP3:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP3_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP3]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i64 [[TMP2]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i64 [[TMP7]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[DOTATOMICTMP3_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[DOTATOMICTMP3_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP12]], ptr [[TMP10]] syncscope("agent-one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    ret i64 [[TMP13]]
//
__device__ unsigned long long atomicu64_op_agent(unsigned long long *ptr, unsigned long long *ptr2, unsigned long long val, unsigned long long desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_AGENT);
  return val;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z18atomic64_op_systemPxS_xx(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[FLAG:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[CMPXCHG_BOOL2:%.*]] = alloca i8, align 1, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP10:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP11:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP13:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP15:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP17:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP19:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP21:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP23:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP25:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP26:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[FLAG_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[FLAG]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[CMPXCHG_BOOL2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CMPXCHG_BOOL2]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP10_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP10]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP11_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP11]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP12_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP12]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP13_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP13]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP14_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP14]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP15_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP15]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP16_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP16]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP17_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP17]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP18_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP18]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP19_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP19]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP20_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP20]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP21_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP21]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP22_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP22]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP23_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP23]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP24_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP24]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP25_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP25]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP26_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP26]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR:%.*]] = cmpxchg ptr [[TMP0]], i64 [[CMPXCHG_EXPECTED]], i64 [[CMPXCHG_DESIRED]] syncscope("one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR]], 1
// CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[CMPXCHG_BOOL_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP2]] to i1
// CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[LOADEDV]] to i8
// CHECK-NEXT:    store i8 [[STOREDV]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_EXPECTED3:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_DESIRED4:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_PAIR5:%.*]] = cmpxchg weak ptr [[TMP3]], i64 [[CMPXCHG_EXPECTED3]], i64 [[CMPXCHG_DESIRED4]] syncscope("one-as") monotonic monotonic, align 8
// CHECK-NEXT:    [[CMPXCHG_PREV6:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 0
// CHECK-NEXT:    store i64 [[CMPXCHG_PREV6]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[CMPXCHG_SUCCESS7:%.*]] = extractvalue { i64, i1 } [[CMPXCHG_PAIR5]], 1
// CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[CMPXCHG_BOOL2_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV8:%.*]] = trunc i8 [[TMP5]] to i1
// CHECK-NEXT:    [[STOREDV9:%.*]] = zext i1 [[LOADEDV8]] to i8
// CHECK-NEXT:    store i8 [[STOREDV9]], ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[DOTATOMICTMP10_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw xchg ptr [[TMP6]], i64 [[TMP8]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP10]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP12]], ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[DOTATOMICTMP11_ASCAST]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = atomicrmw add ptr [[TMP11]], i64 [[TMP13]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP14]], ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATOMIC_TEMP12_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP17]], ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[DOTATOMICTMP13_ASCAST]], align 8
// CHECK-NEXT:    [[TMP19:%.*]] = atomicrmw sub ptr [[TMP16]], i64 [[TMP18]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP19]], ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP14_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP20]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP22]], ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = load i64, ptr [[DOTATOMICTMP15_ASCAST]], align 8
// CHECK-NEXT:    [[TMP24:%.*]] = atomicrmw and ptr [[TMP21]], i64 [[TMP23]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP24]], ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ATOMIC_TEMP16_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP27]], ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = load i64, ptr [[DOTATOMICTMP17_ASCAST]], align 8
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw or ptr [[TMP26]], i64 [[TMP28]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ATOMIC_TEMP18_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP30]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP32]], ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load i64, ptr [[DOTATOMICTMP19_ASCAST]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = atomicrmw xor ptr [[TMP31]], i64 [[TMP33]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP34]], ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ATOMIC_TEMP20_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP35]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[DOTATOMICTMP21_ASCAST]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw min ptr [[TMP36]], i64 [[TMP38]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP39]], ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ATOMIC_TEMP22_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP40]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP42]], ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP43:%.*]] = load i64, ptr [[DOTATOMICTMP23_ASCAST]], align 8
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw max ptr [[TMP41]], i64 [[TMP43]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP44]], ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ATOMIC_TEMP24_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load atomic i64, ptr [[TMP46]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[ATOMIC_TEMP25_ASCAST]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ATOMIC_TEMP25_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP48]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP50]], ptr [[DOTATOMICTMP26_ASCAST]], align 8
// CHECK-NEXT:    [[TMP51:%.*]] = load i64, ptr [[DOTATOMICTMP26_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP51]], ptr [[TMP49]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i8, ptr [[FLAG_ASCAST]], align 1
// CHECK-NEXT:    [[LOADEDV27:%.*]] = trunc i8 [[TMP52]] to i1
// CHECK-NEXT:    br i1 [[LOADEDV27]], label %[[COND_TRUE:.*]], label %[[COND_FALSE:.*]]
// CHECK:       [[COND_TRUE]]:
// CHECK-NEXT:    [[TMP53:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END:.*]]
// CHECK:       [[COND_FALSE]]:
// CHECK-NEXT:    [[TMP54:%.*]] = load i64, ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    br label %[[COND_END]]
// CHECK:       [[COND_END]]:
// CHECK-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP53]], %[[COND_TRUE]] ], [ [[TMP54]], %[[COND_FALSE]] ]
// CHECK-NEXT:    ret i64 [[COND]]
//
__device__ long long atomic64_op_system(long long *ptr, long long *ptr2, long long val, long long desired) {
  bool flag = __hip_atomic_compare_exchange_strong(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  flag = __hip_atomic_compare_exchange_weak(ptr, &val, desired, __ATOMIC_RELAXED, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_exchange(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_add(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_sub(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_and(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_or(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_xor(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_load(ptr, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  return flag ? val : desired;
}

// CHECK-LABEL: define dso_local noundef i64 @_Z19atomicu64_op_systemPyS_yy(
// CHECK-SAME: ptr noundef [[PTR:%.*]], ptr noundef [[PTR2:%.*]], i64 noundef [[VAL:%.*]], i64 noundef [[DESIRED:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[PTR2_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK-NEXT:    [[VAL_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DESIRED_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP1:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[DOTATOMICTMP4:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK-NEXT:    [[RETVAL_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[RETVAL]] to ptr
// CHECK-NEXT:    [[PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR_ADDR]] to ptr
// CHECK-NEXT:    [[PTR2_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[PTR2_ADDR]] to ptr
// CHECK-NEXT:    [[VAL_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[VAL_ADDR]] to ptr
// CHECK-NEXT:    [[DESIRED_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DESIRED_ADDR]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP1]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP2]] to ptr
// CHECK-NEXT:    [[ATOMIC_TEMP3_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[ATOMIC_TEMP3]] to ptr
// CHECK-NEXT:    [[DOTATOMICTMP4_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTATOMICTMP4]] to ptr
// CHECK-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store ptr [[PTR2]], ptr [[PTR2_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[VAL]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[DESIRED]], ptr [[DESIRED_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[DOTATOMICTMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umin ptr [[TMP0]], i64 [[TMP2]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ATOMIC_TEMP_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP4]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP6]], ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[DOTATOMICTMP1_ASCAST]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = atomicrmw umax ptr [[TMP5]], i64 [[TMP7]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ATOMIC_TEMP2_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load atomic i64, ptr [[TMP10]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[ATOMIC_TEMP3_ASCAST]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ATOMIC_TEMP3_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP12]], ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[PTR_ADDR_ASCAST]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    store i64 [[TMP14]], ptr [[DOTATOMICTMP4_ASCAST]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i64, ptr [[DOTATOMICTMP4_ASCAST]], align 8
// CHECK-NEXT:    store atomic i64 [[TMP15]], ptr [[TMP13]] syncscope("one-as") monotonic, align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[VAL_ADDR_ASCAST]], align 8
// CHECK-NEXT:    ret i64 [[TMP16]]
//
__device__ unsigned long long atomicu64_op_system(unsigned long long *ptr, unsigned long long *ptr2, unsigned long long val, unsigned long long desired) {
  val = __hip_atomic_fetch_min(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_fetch_max(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  val = __hip_atomic_load(ptr, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  __hip_atomic_store(ptr, val, __ATOMIC_RELAXED, __HIP_MEMORY_SCOPE_SYSTEM);
  return val;
}
