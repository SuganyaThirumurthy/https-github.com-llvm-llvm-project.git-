; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -mattr=+sve2 -mtriple=aarch64 -passes='loop(loop-idiom-vectorize)' -S < %s | FileCheck -check-prefix=SVE2 %s
; RUN: opt -mattr=-sve2 -mtriple=aarch64 -passes='loop(loop-idiom-vectorize)' -S < %s | FileCheck -check-prefix=NOSVE2 %s

define dso_local noundef ptr @first_byte_of(ptr %0, ptr %1, ptr %2, ptr %3) #0 {
; SVE2-LABEL: define dso_local noundef ptr @first_byte_of(
; SVE2-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]]) #[[ATTR0:[0-9]+]] {
; SVE2-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP0]], [[TMP1]]
; SVE2-NEXT:    [[TMP6:%.*]] = icmp eq ptr [[TMP2]], [[TMP3]]
; SVE2-NEXT:    [[TMP7:%.*]] = or i1 [[TMP5]], [[TMP6]]
; SVE2-NEXT:    br i1 [[TMP7]], label %[[BB46:.*]], label %[[DOTPREHEADER:.*]]
; SVE2:       [[_PREHEADER:.*:]]
; SVE2-NEXT:    br i1 false, label %[[SCALAR_PH:.*]], label %[[BB8:.*]]
; SVE2:       [[BB8]]:
; SVE2-NEXT:    [[PA:%.*]] = phi ptr [ [[TMP0]], %[[DOTPREHEADER]] ], [ [[TMP14:%.*]], %[[TMP37:.*]] ]
; SVE2-NEXT:    [[TMP14]] = getelementptr i8, ptr [[PA]], i32 16
; SVE2-NEXT:    [[TMP10:%.*]] = icmp ult ptr [[TMP14]], [[TMP1]]
; SVE2-NEXT:    [[TMP16:%.*]] = select i1 [[TMP10]], ptr [[TMP14]], ptr [[TMP1]]
; SVE2-NEXT:    [[TMP17:%.*]] = ptrtoint ptr [[PA]] to i64
; SVE2-NEXT:    [[TMP18:%.*]] = ptrtoint ptr [[TMP16]] to i64
; SVE2-NEXT:    [[TMP19:%.*]] = call <vscale x 16 x i1> @llvm.get.active.lane.mask.nxv16i1.i64(i64 [[TMP17]], i64 [[TMP18]])
; SVE2-NEXT:    [[TMP20:%.*]] = call <vscale x 16 x i8> @llvm.masked.load.nxv16i8.p0(ptr [[PA]], i32 1, <vscale x 16 x i1> [[TMP19]], <vscale x 16 x i8> zeroinitializer)
; SVE2-NEXT:    br label %[[BB16:.*]]
; SVE2:       [[BB16]]:
; SVE2-NEXT:    [[PB:%.*]] = phi ptr [ [[TMP2]], %[[BB8]] ], [ [[TMP26:%.*]], %[[TMP38:.*]] ]
; SVE2-NEXT:    [[TMP26]] = getelementptr i8, ptr [[PB]], i32 16
; SVE2-NEXT:    [[TMP21:%.*]] = icmp ult ptr [[TMP26]], [[TMP3]]
; SVE2-NEXT:    [[TMP22:%.*]] = select i1 [[TMP21]], ptr [[TMP26]], ptr [[TMP3]]
; SVE2-NEXT:    [[TMP31:%.*]] = ptrtoint ptr [[PB]] to i64
; SVE2-NEXT:    [[TMP32:%.*]] = ptrtoint ptr [[TMP22]] to i64
; SVE2-NEXT:    [[TMP33:%.*]] = call <vscale x 16 x i1> @llvm.get.active.lane.mask.nxv16i1.i64(i64 [[TMP31]], i64 [[TMP32]])
; SVE2-NEXT:    [[TMP34:%.*]] = call <vscale x 16 x i8> @llvm.masked.load.nxv16i8.p0(ptr [[PB]], i32 1, <vscale x 16 x i1> [[TMP33]], <vscale x 16 x i8> zeroinitializer)
; SVE2-NEXT:    [[TMP35:%.*]] = extractelement <vscale x 16 x i8> [[TMP34]], i64 0
; SVE2-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 16 x i8> poison, i8 [[TMP35]], i64 0
; SVE2-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 16 x i8> [[DOTSPLATINSERT]], <vscale x 16 x i8> poison, <vscale x 16 x i32> zeroinitializer
; SVE2-NEXT:    [[TMP36:%.*]] = select <vscale x 16 x i1> [[TMP33]], <vscale x 16 x i8> [[TMP34]], <vscale x 16 x i8> [[DOTSPLAT]]
; SVE2-NEXT:    [[TMP40:%.*]] = call <vscale x 16 x i1> @llvm.experimental.vector.match.nxv16i8(<vscale x 16 x i8> [[TMP20]], <vscale x 16 x i8> [[TMP36]], <vscale x 16 x i1> [[TMP19]], i32 16)
; SVE2-NEXT:    [[TMP41:%.*]] = call i1 @llvm.vector.reduce.or.nxv16i1(<vscale x 16 x i1> [[TMP40]])
; SVE2-NEXT:    br i1 [[TMP41]], label %[[BB28:.*]], label %[[TMP38]]
; SVE2:       [[BB28]]:
; SVE2-NEXT:    [[TMP43:%.*]] = call i64 @llvm.experimental.cttz.elts.i64.nxv16i1(<vscale x 16 x i1> [[TMP40]], i1 true)
; SVE2-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr [[PA]], i64 [[TMP43]]
; SVE2-NEXT:    br label %[[DOTLOOPEXIT:.*]]
; SVE2:       [[TMP38]]:
; SVE2-NEXT:    br i1 [[TMP21]], label %[[BB16]], label %[[TMP37]]
; SVE2:       [[TMP37]]:
; SVE2-NEXT:    br i1 [[TMP10]], label %[[BB8]], label %[[DOTLOOPEXIT1:.*]]
; SVE2:       [[SCALAR_PH]]:
; SVE2-NEXT:    br label %[[BB33:.*]]
; SVE2:       [[BB33]]:
; SVE2-NEXT:    [[TMP46:%.*]] = phi ptr [ [[TMP56:%.*]], %[[TMP45:.*]] ], [ [[TMP0]], %[[SCALAR_PH]] ]
; SVE2-NEXT:    [[TMP47:%.*]] = load i8, ptr [[TMP46]], align 1
; SVE2-NEXT:    br label %[[BB39:.*]]
; SVE2:       [[BB36:.*]]:
; SVE2-NEXT:    [[TMP49:%.*]] = getelementptr inbounds i8, ptr [[TMP52:%.*]], i64 1
; SVE2-NEXT:    [[TMP50:%.*]] = icmp eq ptr [[TMP49]], [[TMP3]]
; SVE2-NEXT:    br i1 [[TMP50]], label %[[TMP45]], label %[[BB39]]
; SVE2:       [[BB39]]:
; SVE2-NEXT:    [[TMP52]] = phi ptr [ [[TMP2]], %[[BB33]] ], [ [[TMP49]], %[[BB36]] ]
; SVE2-NEXT:    [[TMP53:%.*]] = load i8, ptr [[TMP52]], align 1
; SVE2-NEXT:    [[TMP54:%.*]] = icmp eq i8 [[TMP47]], [[TMP53]]
; SVE2-NEXT:    br i1 [[TMP54]], label %[[DOTLOOPEXIT]], label %[[BB36]]
; SVE2:       [[TMP45]]:
; SVE2-NEXT:    [[TMP56]] = getelementptr inbounds i8, ptr [[TMP46]], i64 1
; SVE2-NEXT:    [[TMP57:%.*]] = icmp eq ptr [[TMP56]], [[TMP1]]
; SVE2-NEXT:    br i1 [[TMP57]], label %[[DOTLOOPEXIT1]], label %[[BB33]]
; SVE2:       [[_LOOPEXIT:.*:]]
; SVE2-NEXT:    [[DOTLCSSA:%.*]] = phi ptr [ [[TMP46]], %[[BB39]] ], [ [[TMP44]], %[[BB28]] ]
; SVE2-NEXT:    br label %[[BB46]]
; SVE2:       [[_LOOPEXIT1:.*:]]
; SVE2-NEXT:    br label %[[BB46]]
; SVE2:       [[BB46]]:
; SVE2-NEXT:    [[TMP59:%.*]] = phi ptr [ [[TMP1]], [[TMP4:%.*]] ], [ [[DOTLCSSA]], %[[DOTLOOPEXIT]] ], [ [[TMP1]], %[[DOTLOOPEXIT1]] ]
; SVE2-NEXT:    ret ptr [[TMP59]]
;
; NOSVE2-LABEL: define dso_local noundef ptr @first_byte_of(
; NOSVE2-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]]) #[[ATTR0:[0-9]+]] {
; NOSVE2-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP0]], [[TMP1]]
; NOSVE2-NEXT:    [[TMP6:%.*]] = icmp eq ptr [[TMP2]], [[TMP3]]
; NOSVE2-NEXT:    [[TMP7:%.*]] = or i1 [[TMP5]], [[TMP6]]
; NOSVE2-NEXT:    br i1 [[TMP7]], label %[[BB21:.*]], label %[[DOTPREHEADER:.*]]
; NOSVE2:       [[_PREHEADER:.*:]]
; NOSVE2-NEXT:    br label %[[BB8:.*]]
; NOSVE2:       [[BB8]]:
; NOSVE2-NEXT:    [[TMP9:%.*]] = phi ptr [ [[TMP19:%.*]], %[[TMP18:.*]] ], [ [[TMP0]], %[[DOTPREHEADER]] ]
; NOSVE2-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP9]], align 1
; NOSVE2-NEXT:    br label %[[BB14:.*]]
; NOSVE2:       [[BB11:.*]]:
; NOSVE2-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i8, ptr [[TMP15:%.*]], i64 1
; NOSVE2-NEXT:    [[TMP13:%.*]] = icmp eq ptr [[TMP12]], [[TMP3]]
; NOSVE2-NEXT:    br i1 [[TMP13]], label %[[TMP18]], label %[[BB14]]
; NOSVE2:       [[BB14]]:
; NOSVE2-NEXT:    [[TMP15]] = phi ptr [ [[TMP2]], %[[BB8]] ], [ [[TMP12]], %[[BB11]] ]
; NOSVE2-NEXT:    [[TMP16:%.*]] = load i8, ptr [[TMP15]], align 1
; NOSVE2-NEXT:    [[TMP17:%.*]] = icmp eq i8 [[TMP10]], [[TMP16]]
; NOSVE2-NEXT:    br i1 [[TMP17]], label %[[DOTLOOPEXIT:.*]], label %[[BB11]]
; NOSVE2:       [[TMP18]]:
; NOSVE2-NEXT:    [[TMP19]] = getelementptr inbounds i8, ptr [[TMP9]], i64 1
; NOSVE2-NEXT:    [[TMP20:%.*]] = icmp eq ptr [[TMP19]], [[TMP1]]
; NOSVE2-NEXT:    br i1 [[TMP20]], label %[[DOTLOOPEXIT1:.*]], label %[[BB8]]
; NOSVE2:       [[_LOOPEXIT:.*:]]
; NOSVE2-NEXT:    [[DOTLCSSA:%.*]] = phi ptr [ [[TMP9]], %[[BB14]] ]
; NOSVE2-NEXT:    br label %[[BB21]]
; NOSVE2:       [[_LOOPEXIT1:.*:]]
; NOSVE2-NEXT:    br label %[[BB21]]
; NOSVE2:       [[BB21]]:
; NOSVE2-NEXT:    [[TMP22:%.*]] = phi ptr [ [[TMP1]], [[TMP4:%.*]] ], [ [[DOTLCSSA]], %[[DOTLOOPEXIT]] ], [ [[TMP1]], %[[DOTLOOPEXIT1]] ]
; NOSVE2-NEXT:    ret ptr [[TMP22]]
;
  %5 = icmp eq ptr %0, %1
  %6 = icmp eq ptr %2, %3
  %7 = or i1 %5, %6
  br i1 %7, label %21, label %8

8:
  %9 = phi ptr [ %19, %18 ], [ %0, %4 ]
  %10 = load i8, ptr %9, align 1
  br label %14

11:
  %12 = getelementptr inbounds i8, ptr %15, i64 1
  %13 = icmp eq ptr %12, %3
  br i1 %13, label %18, label %14

14:
  %15 = phi ptr [ %2, %8 ], [ %12, %11 ]
  %16 = load i8, ptr %15, align 1
  %17 = icmp eq i8 %10, %16
  br i1 %17, label %21, label %11

18:
  %19 = getelementptr inbounds i8, ptr %9, i64 1
  %20 = icmp eq ptr %19, %1
  br i1 %20, label %21, label %8

21:
  %22 = phi ptr [ %1, %4 ], [ %9, %14 ], [ %1, %18 ]
  ret ptr %22
}

attributes #0 = { "target-features"="+sve2" }
