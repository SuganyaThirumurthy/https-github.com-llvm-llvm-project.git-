; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx10.2-512 | FileCheck %s --check-prefix=X64
; RUN: llc < %s -mtriple=i386-unknown-unknown -mattr=+avx10.2-512 | FileCheck %s --check-prefix=X86

define i1 @oeq(float %x, float %y) {
; X64-LABEL: oeq:
; X64:       # %bb.0:
; X64-NEXT:    vucomxss %xmm1, %xmm0
; X64-NEXT:    sete %al
; X64-NEXT:    retq
;
; X86-LABEL: oeq:
; X86:       # %bb.0:
; X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-NEXT:    vucomxss {{[0-9]+}}(%esp), %xmm0
; X86-NEXT:    sete %al
; X86-NEXT:    retl
    %1 = fcmp oeq float %x, %y
    ret i1 %1
}

define i1 @une(float %x, float %y) {
; X64-LABEL: une:
; X64:       # %bb.0:
; X64-NEXT:    vucomxss %xmm1, %xmm0
; X64-NEXT:    setne %al
; X64-NEXT:    retq
;
; X86-LABEL: une:
; X86:       # %bb.0:
; X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-NEXT:    vucomxss {{[0-9]+}}(%esp), %xmm0
; X86-NEXT:    setne %al
; X86-NEXT:    retl
    %1 = fcmp une float %x, %y
    ret i1 %1
}

define i1 @ogt(float %x, float %y) {
; X64-LABEL: ogt:
; X64:       # %bb.0:
; X64-NEXT:    vucomiss %xmm1, %xmm0
; X64-NEXT:    seta %al
; X64-NEXT:    retq
;
; X86-LABEL: ogt:
; X86:       # %bb.0:
; X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-NEXT:    vucomiss {{[0-9]+}}(%esp), %xmm0
; X86-NEXT:    seta %al
; X86-NEXT:    retl
    %1 = fcmp ogt float %x, %y
    ret i1 %1
}

define i1 @oeq_mem(ptr %xp, ptr %yp) {
; X64-LABEL: oeq_mem:
; X64:       # %bb.0:
; X64-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X64-NEXT:    vucomxss (%rsi), %xmm0
; X64-NEXT:    sete %al
; X64-NEXT:    retq
;
; X86-LABEL: oeq_mem:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-NEXT:    vucomxss (%eax), %xmm0
; X86-NEXT:    sete %al
; X86-NEXT:    retl
    %x = load float, ptr %xp
    %y = load float, ptr %yp
    %1 = fcmp oeq float %x, %y
    ret i1 %1
}

define i1 @une_mem(ptr %xp, ptr %yp) {
; X64-LABEL: une_mem:
; X64:       # %bb.0:
; X64-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X64-NEXT:    vucomxss (%rsi), %xmm0
; X64-NEXT:    setne %al
; X64-NEXT:    retq
;
; X86-LABEL: une_mem:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-NEXT:    vucomxss (%eax), %xmm0
; X86-NEXT:    setne %al
; X86-NEXT:    retl
    %x = load float, ptr %xp
    %y = load float, ptr %yp
    %1 = fcmp une float %x, %y
    ret i1 %1
}


define i1 @ogt_mem(ptr %xp, ptr %yp) {
; X64-LABEL: ogt_mem:
; X64:       # %bb.0:
; X64-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X64-NEXT:    vucomiss (%rsi), %xmm0
; X64-NEXT:    seta %al
; X64-NEXT:    retq
;
; X86-LABEL: ogt_mem:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-NEXT:    vucomiss (%eax), %xmm0
; X86-NEXT:    seta %al
; X86-NEXT:    retl
    %x = load float, ptr %xp
    %y = load float, ptr %yp
    %1 = fcmp ogt float %x, %y
    ret i1 %1
}
